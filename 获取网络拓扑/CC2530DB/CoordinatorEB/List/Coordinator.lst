###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                18/Aug/2012  16:11:33 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\GenericApp\Source\Coordinator #
#                          .c                                                 #
#    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\GenericApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ       #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg" (-DSECURE=0         #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\GenericApp\Source\Coordinato #
#                          r.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D      #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC "C:\Texas   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\CoordinatorEB\List #
#                          \" -lA "C:\Texas Instruments\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\GenericApp\CC2530DB\C #
#                          oordinatorEB\List\" --diag_suppress Pe001,Pa010    #
#                          -o "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\GenericApp\CC2530DB\Coord #
#                          inatorEB\Obj\" -e --require_prototypes --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Texas                  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\" -I "C:\Texas     #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\SOURCE\" -I     #
#                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \ZMAIN\TI2530DB\" -I "C:\Texas                     #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MT\" -I "C:\Texas                          #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\HAL\INCLUDE\" -I "C:\Texas                 #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\HAL\TARGET\CC2530EB\" -I "C:\Texas         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\OSAL\MCU\CCSOC\" -I "C:\Texas              #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\OSAL\INCLUDE\" -I "C:\Texas                #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\AF\" -I "C:\Texas                    #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\NWK\" -I "C:\Texas                   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\SEC\" -I "C:\Texas                   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\SAPI\" -I "C:\Texas                  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\SYS\" -I "C:\Texas                   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\ZDO\" -I "C:\Texas                   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\ZMAC\F8W\" -I "C:\Texas                    #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\ZMAC\" -I "C:\Texas                        #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\SERVICES\SADDR\" -I "C:\Texas              #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\SERVICES\SDATA\" -I "C:\Texas              #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\INCLUDE\" -I "C:\Texas                 #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\HIGH_LEVEL\" -I "C:\Texas              #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Texas         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I       #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\Coordinat #
#                          orEB\List\Coordinator.lst                          #
#    Object file        =  C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\Coordinat #
#                          orEB\Obj\Coordinator.r51                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\Source\Coordinator.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include <string.h>
      7          
      8          #include "Coordinator.h"
      9          
     10          #include "DebugTrace.h"
     11          #if !defined(WIN32)
     12          #include "OnBoard.h"
     13          #endif
     14          
     15          #include "hal_led.h"
     16          
     17          #include "hal_key.h"
     18          #include "hal_uart.h"
     19          #include "OSAL_Nv.h"
     20          
     21          
     22          #define SEND_TO_ALL_EVENT		0x01
     23          

   \                                 In  segment XDATA_ROM_C, align 1
     24          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS]={
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
     25          GENERICAPP_CLUSTERID  \
     26           };

   \                                 In  segment XDATA_ROM_C, align 1
     27          const SimpleDescriptionFormat_t GenericApp_SimpleDesc=
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F0100     DW 3844, 1
   \   000005   0001         DB 0, 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
     28          {
     29            GENERICAPP_ENDPOINT,
     30            GENERICAPP_PROFID,
     31            GENERICAPP_DEVICEID,
     32            GENERICAPP_DEVICE_VERSION,
     33            GENERICAPP_FLAGS,
     34            GENERICAPP_MAX_CLUSTERS,
     35            (cId_t *)GenericApp_ClusterList,
     36            0,
     37            (cId_t *)NULL
     38          };
     39          
     40          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     42          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     43          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     44          byte GenericApp_TaskID;
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     45          byte GenericApp_TransID;
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     46          RFTX nodeinfo[3];
   \                     nodeinfo:
   \   000000                DS 33
   \   000021                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     47          uint8 nodenum=0;
   \                     nodenum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     48          //unsigned char uartbuf[128];
     49          
     50          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pckt);
     51          void GenericApp_SendTheMessage(void);
     52          
     53          static void rxCB(uint8 port, uint8 event);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     54          static void rxCB(uint8 port, uint8 event)
   \                     rxCB:
     55          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     56               unsigned char changeline[2]={0x0A,0x0D};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {10, 13}>` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {10, 13}>` & 0xff)
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     57               uint8 buf[8];
     58               uint8 i=0;
     59               HalUARTRead(0,buf,8);
   \   00001F                ; Setup parameters for call to function HalUARTRead
   \   00001F   7C08         MOV     R4,#0x8
   \   000021   FD           MOV     R5,A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AA82         MOV     R2,DPL
   \   000029   AB83         MOV     R3,DPH
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   12....       LCALL   ??HalUARTRead?relay
     60                
     61              if(osal_memcmp(buf,"topology",8))
   \   000030                ; Setup parameters for call to function osal_memcmp
   \   000030   75....       MOV     ?V0 + 0,#(`?<Constant "topology">` & 0xff)
   \   000033   75....       MOV     ?V0 + 1,#((`?<Constant "topology">` >> 8) & 0xff)
   \   000036   75..00       MOV     ?V0 + 2,#0x0
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV     R4,#0x8
   \   000040   7D00         MOV     R5,#0x0
   \   000042   7405         MOV     A,#0x5
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   A982         MOV     R1,DPL
   \   000049   AA83         MOV     R2,DPH
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   ??osal_memcmp?relay
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
   \   000056   605A         JZ      ??rxCB_0
     62                {
     63                  for(i=0;i<3;i++)
   \   000058   75..00       MOV     ?V0 + 0,#0x0
     64                  {
     65                    HalUARTWrite(0,nodeinfo[i].type,3);
   \                     ??rxCB_1:
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   75F00B       MOV     B,#0xb
   \   000060   A4           MUL     AB
   \   000061   24..         ADD     A,#(nodeinfo & 0xff)
   \   000063   FE           MOV     R6,A
   \   000064   E5F0         MOV     A,B
   \   000066   34..         ADDC    A,#((nodeinfo >> 8) & 0xff)
   \   000068   FF           MOV     R7,A
   \   000069                ; Setup parameters for call to function HalUARTWrite
   \   000069   7C03         MOV     R4,#0x3
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \   000071   7900         MOV     R1,#0x0
   \   000073   12....       LCALL   ??HalUARTWrite?relay
     66                    HalUARTWrite(0,"  NWK:  ",8);
   \   000076                ; Setup parameters for call to function HalUARTWrite
   \   000076   7C08         MOV     R4,#0x8
   \   000078   7D00         MOV     R5,#0x0
   \   00007A   7A..         MOV     R2,#(`?<Constant "  NWK:  ">` & 0xff)
   \   00007C   7B..         MOV     R3,#((`?<Constant "  NWK:  ">` >> 8) & 0xff)
   \   00007E   12....       LCALL   ?Subroutine1 & 0xFFFF
     67                    HalUARTWrite(0,nodeinfo[i].myNWK,4);
   \                     ??CrossCallReturnLabel_2:
   \   000081   2403         ADD     A,#0x3
   \   000083   12....       LCALL   ?Subroutine0 & 0xFFFF
     68                    HalUARTWrite(0,"  pNWK:  ",9);
   \                     ??CrossCallReturnLabel_0:
   \   000086                ; Setup parameters for call to function HalUARTWrite
   \   000086   7C09         MOV     R4,#0x9
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   7A..         MOV     R2,#(`?<Constant "  pNWK:  ">` & 0xff)
   \   00008C   7B..         MOV     R3,#((`?<Constant "  pNWK:  ">` >> 8) & 0xff)
   \   00008E   12....       LCALL   ?Subroutine1 & 0xFFFF
     69                    HalUARTWrite(0,nodeinfo[i].pNWK,4);
   \                     ??CrossCallReturnLabel_3:
   \   000091   2407         ADD     A,#0x7
   \   000093   12....       LCALL   ?Subroutine0 & 0xFFFF
     70                    HalUARTWrite(0,changeline,2);
   \                     ??CrossCallReturnLabel_1:
   \   000096                ; Setup parameters for call to function HalUARTWrite
   \   000096   7C02         MOV     R4,#0x2
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   AA82         MOV     R2,DPL
   \   0000A2   AB83         MOV     R3,DPH
   \   0000A4   7900         MOV     R1,#0x0
   \   0000A6   12....       LCALL   ??HalUARTWrite?relay
     71                  }
   \   0000A9   05..         INC     ?V0 + 0
   \   0000AB   E5..         MOV     A,?V0 + 0
   \   0000AD   C3           CLR     C
   \   0000AE   9403         SUBB    A,#0x3
   \   0000B0   40A9         JC      ??rxCB_1
     72                }
     73          }
   \                     ??rxCB_0:
   \   0000B2   740A         MOV     A,#0xa
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7                REQUIRE ?Subroutine2
   \   0000B7                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C04         MOV     R4,#0x4
   \   000007   7D00         MOV     R5,#0x0
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FA           MOV     R2,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   FB           MOV     R3,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   12....       LCALL   ??HalUARTWrite?relay
   \   00000A   22           RET
     74          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void GenericApp_Init(byte task_id)
   \                     GenericApp_Init:
     76          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
     77          	halUARTCfg_t uartConfig;
     78          	
     79          	GenericApp_TaskID		=task_id;
   \   000009   E9           MOV     A,R1
   \   00000A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000D   F0           MOVX    @DPTR,A
     80          	GenericApp_TransID		=0;
   \   00000E   E4           CLR     A
   \   00000F   90....       MOV     DPTR,#GenericApp_TransID
   \   000012   F0           MOVX    @DPTR,A
     81          	GenericApp_epDesc.endPoint=GENERICAPP_ENDPOINT;
   \   000013   740A         MOV     A,#0xa
   \   000015   90....       MOV     DPTR,#GenericApp_epDesc
   \   000018   F0           MOVX    @DPTR,A
     82          	GenericApp_epDesc.task_id=&GenericApp_TaskID;
   \   000019   90....       MOV     DPTR,#(GenericApp_epDesc + 1)
   \   00001C   74..         MOV     A,#(GenericApp_TaskID & 0xff)
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#((GenericApp_TaskID >> 8) & 0xff)
   \   000022   F0           MOVX    @DPTR,A
     83          	GenericApp_epDesc.simpleDesc=(SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000023   90....       MOV     DPTR,#(GenericApp_epDesc + 3)
   \   000026   74..         MOV     A,#(GenericApp_SimpleDesc & 0xff)
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   74..         MOV     A,#((GenericApp_SimpleDesc >> 8) & 0xff)
   \   00002C   F0           MOVX    @DPTR,A
     84          	GenericApp_epDesc.latencyReq=noLatencyReqs;
   \   00002D   E4           CLR     A
   \   00002E   90....       MOV     DPTR,#(GenericApp_epDesc + 5)
   \   000031   F0           MOVX    @DPTR,A
     85          	afRegister(&GenericApp_epDesc);
   \   000032                ; Setup parameters for call to function afRegister
   \   000032   7A..         MOV     R2,#(GenericApp_epDesc & 0xff)
   \   000034   7B..         MOV     R3,#((GenericApp_epDesc >> 8) & 0xff)
   \   000036   12....       LCALL   ??afRegister?relay
     86          
     87          	uartConfig.configured		=TRUE;
   \   000039   7401         MOV     A,#0x1
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   F0           MOVX    @DPTR,A
     88          	uartConfig.baudRate		=HAL_UART_BR_115200;
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7404         MOV     A,#0x4
   \   000047   F0           MOVX    @DPTR,A
     89          	uartConfig.flowControl		=FALSE;
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
     90          	uartConfig.callBackFunc		=rxCB;
   \   00004F   741B         MOV     A,#0x1b
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   74..         MOV     A,#(??rxCB?relay & 0xff)
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#((??rxCB?relay >> 8) & 0xff)
   \   00005A   F0           MOVX    @DPTR,A
     91          	HalUARTOpen(0,&uartConfig);
   \   00005B                ; Setup parameters for call to function HalUARTOpen
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   7900         MOV     R1,#0x0
   \   000067   12....       LCALL   ??HalUARTOpen?relay
     92          
     93          	
     94          	
     95          }
   \   00006A   741D         MOV     A,#0x1d
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   D083         POP     DPH
   \   000071   D082         POP     DPL
   \   000073   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          UINT16 GenericApp_ProcessEvent(byte tadk_id,UINT16 events)
   \                     GenericApp_ProcessEvent:
     97          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     98          	afIncomingMSGPacket_t *MSGpkt;
     99          	if(events&SYS_EVENT_MSG)
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??GenericApp_ProcessEvent_0
   \   000011   E9           MOV     A,R1
   \                     ??GenericApp_ProcessEvent_0:
   \   000012   6038         JZ      ??GenericApp_ProcessEvent_1
    100          		{
    101          			MSGpkt=(afIncomingMSGPacket_t *)osal_msg_receive(GenericApp_TaskID);
   \   000014                ; Setup parameters for call to function osal_msg_receive
   \   000014   8017         SJMP    ??GenericApp_ProcessEvent_2
    102          			while(MSGpkt)
    103          				{
    104          					switch(MSGpkt->hdr.event)
   \                     ??GenericApp_ProcessEvent_3:
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   641A         XRL     A,#0x1a
   \   00001D   7007         JNZ     ??GenericApp_ProcessEvent_4
    105          						{
    106          							case AF_INCOMING_MSG_CMD:
    107          								GenericApp_MessageMSGCB(MSGpkt);
   \   00001F                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   ??GenericApp_MessageMSGCB?relay
    108          								break;
    109          							
    110          						        default:
    111          									break;
    112          						}
    113          					osal_msg_deallocate((uint8 *) MSGpkt);
   \                     ??GenericApp_ProcessEvent_4:
   \   000026                ; Setup parameters for call to function osal_msg_deallocate
   \   000026   EE           MOV     A,R6
   \   000027   FA           MOV     R2,A
   \   000028   EF           MOV     A,R7
   \   000029   FB           MOV     R3,A
   \   00002A   12....       LCALL   ??osal_msg_deallocate?relay
    114          					MSGpkt=(afIncomingMSGPacket_t *)osal_msg_receive(GenericApp_TaskID);
   \   00002D                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_2:
   \   00002D   90....       MOV     DPTR,#GenericApp_TaskID
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   ??osal_msg_receive?relay
   \   000035   8A..         MOV     ?V0 + 2,R2
   \   000037   8B..         MOV     ?V0 + 3,R3
   \   000039   AE..         MOV     R6,?V0 + 2
   \   00003B   AF..         MOV     R7,?V0 + 3
    115          				}
   \   00003D   EE           MOV     A,R6
   \   00003E   7001         JNZ     ??GenericApp_ProcessEvent_5
   \   000040   EF           MOV     A,R7
   \                     ??GenericApp_ProcessEvent_5:
   \   000041   70D3         JNZ     ??GenericApp_ProcessEvent_3
    116          			return (events ^SYS_EVENT_MSG);
   \   000043   AA..         MOV     R2,?V0 + 0
   \   000045   7480         MOV     A,#-0x80
   \   000047   65..         XRL     A,?V0 + 1
   \   000049   FB           MOV     R3,A
   \   00004A   8004         SJMP    ??GenericApp_ProcessEvent_6
    117          		}
    118          		
    119          	return 0;
   \                     ??GenericApp_ProcessEvent_1:
   \   00004C   7A00         MOV     R2,#0x0
   \   00004E   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_6:
   \   000050   7F04         MOV     R7,#0x4
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
    120          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    121          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t * pkt)
   \                     GenericApp_MessageMSGCB:
    122          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    123          	switch(pkt->clusterId)
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7002         JNZ     ??GenericApp_MessageMSGCB_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??GenericApp_MessageMSGCB_0:
   \   000014   703A         JNZ     ??GenericApp_MessageMSGCB_1
    124          		{
    125          			case GENERICAPP_CLUSTERID:
    126          				osal_memcpy(&nodeinfo[nodenum++],pkt->cmd.Data,11);
   \   000016                ; Setup parameters for call to function osal_memcpy
   \   000016   EA           MOV     A,R2
   \   000017   2421         ADD     A,#0x21
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 1,A
   \   000027   75..00       MOV     ?V0 + 2,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002F   7C0B         MOV     R4,#0xb
   \   000031   7D00         MOV     R5,#0x0
   \   000033   90....       MOV     DPTR,#nodenum
   \   000036   E0           MOVX    A,@DPTR
   \   000037   8CF0         MOV     B,R4
   \   000039   A4           MUL     AB
   \   00003A   24..         ADD     A,#(nodeinfo & 0xff)
   \   00003C   FA           MOV     R2,A
   \   00003D   E5F0         MOV     A,B
   \   00003F   34..         ADDC    A,#((nodeinfo >> 8) & 0xff)
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   ??osal_memcpy?relay
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   90....       MOV     DPTR,#nodenum
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   04           INC     A
   \   00004F   F0           MOVX    @DPTR,A
    127          				break;
    128          		}
    129          }
   \                     ??GenericApp_MessageMSGCB_1:
   \   000050   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          void GenericApp_SendTheMessage(void)
   \                     GenericApp_SendTheMessage:
    131          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    132          	/*unsigned char *theMessageData="Coordinator send!";
    133          	afAddrType_t my_DstAddr;
    134          	my_DstAddr.addrMode=(afAddrMode_t)AddrGroup;
    135          	my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
    136          	my_DstAddr.addr.shortAddr=GenericApp_Group.ID;
    137          	AF_DataRequest(&my_DstAddr,
    138          		&GenericApp_epDesc,
    139          		GENERICAPP_CLUSTERID,
    140          		osal_strlen(theMessageData)+1,
    141          		theMessageData,
    142          		&GenericApp_TransID,
    143          		AF_DISCV_ROUTE,
    144          		AF_DEFAULT_RADIUS);*/
    145          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {10, 13}>`:
   \   000000   0A0D         DB 10, 13

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  NWK:  ">`:
   \   000000   20204E57     DB "  NWK:  "
   \            4B3A2020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  pNWK:  ">`:
   \   000000   2020704E     DB "  pNWK:  "
   \            574B3A20
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "topology">`:
   \   000000   746F706F     DB "topology"
   \            6C6F6779
   \            00      

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     GenericApp_Init                  3      0     29
       -> afRegister                  4      0     58
       -> HalUARTOpen                 4      0     58
     GenericApp_MessageMSGCB          0      0     26
       -> osal_memcpy                 0      0     28
     GenericApp_ProcessEvent          0      0     12
       -> osal_msg_receive            0      0     24
       -> GenericApp_MessageMSGCB     0      0     24
       -> osal_msg_deallocate         0      0     24
       -> osal_msg_receive            0      0     24
     GenericApp_SendTheMessage        0      0      0
     rxCB                             2      0     24
       -> HalUARTRead                 0      0     42
       -> osal_memcmp                 0      0     48
       -> HalUARTWrite                0      0     42
       -> HalUARTWrite                0      0     42
       -> HalUARTWrite                0      0     42
       -> HalUARTWrite                0      0     42
       -> HalUARTWrite                0      0     42
       -> HalUARTWrite                0      0     42


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     GenericApp_ClusterList               2
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_NwkState                  1
     GenericApp_TaskID                    1
     GenericApp_TransID                   1
     nodeinfo                            33
     nodenum                              1
     rxCB                               183
     ?Subroutine2                         5
     ?Subroutine1                        11
     ?Subroutine0                        11
     GenericApp_Init                    118
     GenericApp_ProcessEvent             85
     GenericApp_MessageMSGCB             83
     GenericApp_SendTheMessage            3
     ??rxCB?relay                         6
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_MessageMSGCB?relay      6
     ??GenericApp_SendTheMessage?relay    6
     ?<Constant {10, 13}>                 2
     ?<Constant "  NWK:  ">               9
     ?<Constant "  pNWK:  ">             10
     ?<Constant "topology">               9

 
 499 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  44 bytes in segment XDATA_ROM_C
  43 bytes in segment XDATA_Z
 
 529 bytes of CODE  memory
  44 bytes of CONST memory
  43 bytes of XDATA memory

Errors: none
Warnings: none
